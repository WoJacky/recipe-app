{"version":3,"sources":["recipe.module.css","component/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","props","className","style","recipe","title","ingredients","map","ingredient","text","calories","toFixed","image","src","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipies","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,2MCY3CC,EAXA,SAACC,GACf,OACC,yBAAKC,UAAWC,IAAMC,QACrB,4BAAKH,EAAMI,OACX,4BAAKJ,EAAMK,YAAYC,KAAI,SAACC,GAAD,OAAgB,gCAAMA,EAAWC,KAAjB,SAC3C,+BAAKR,EAAMS,SAASC,UAApB,SACA,yBAAKT,UAAWC,IAAMS,MAAOC,IAAKZ,EAAMW,UCiD5BE,G,MAtDH,WACX,IADiB,EAGeC,mBAAS,IAHxB,mBAGTC,EAHS,KAGAC,EAHA,OAIaF,mBAAS,IAJtB,mBAITG,EAJS,KAIDC,EAJC,OAKWJ,mBAAS,WALpB,mBAKTK,EALS,KAKFC,EALE,KAOjBC,qBACC,WACCC,MAED,CAAEH,IAGH,IAAMG,EAAW,uCAAG,8BAAAC,EAAA,sEACIC,MAAM,mCAAD,OAAoCL,EAApC,mBAdjB,WAciB,oBAbhB,qCAYO,cACbM,EADa,gBAEAA,EAASC,OAFT,OAEbC,EAFa,OAGnBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJE,2CAAH,qDAiBjB,OACC,yBAAK3B,UAAU,OACd,0BAAM8B,SAZU,SAACC,GAClBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KASkBjB,UAAU,eACpC,2BAAOiC,KAAK,OAAOjC,UAAU,aAAakC,MAAOlB,EAAQmB,SAPvC,SAACJ,GACrBd,EAAUc,EAAEK,OAAOF,OACnBN,QAAQC,IAAIb,MAMV,4BAAQiB,KAAK,SAASjC,UAAU,iBAAhC,WAID,yBAAKA,UAAU,WACbc,EAAQT,KAAI,SAACH,GAAD,OACZ,kBAAC,EAAD,CACCmC,IAAKnC,EAAOA,OAAOoC,MACnBnC,MAAOD,EAAOA,OAAOoC,MACrB9B,SAAUN,EAAOA,OAAOM,SACxBE,MAAOR,EAAOA,OAAOQ,MACrBN,YAAaF,EAAOA,OAAOE,qBCrCbmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.92994d12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1LbmJ\",\"image\":\"recipe_image__26D2y\"};","import React from 'react';\r\nimport style from '../recipe.module.css';\r\nconst Recipe = (props) => {\r\n\treturn (\r\n\t\t<div className={style.recipe}>\r\n\t\t\t<h1>{props.title}</h1>\r\n\t\t\t<ol>{props.ingredients.map((ingredient) => <li> {ingredient.text} </li>)}</ol>\r\n\t\t\t<p> {props.calories.toFixed()} kcal</p>\r\n\t\t\t<img className={style.image} src={props.image} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from 'react';\nimport Recipe from './component/Recipe';\nimport './App.css';\nconst App = () => {\n\tconst APP_ID = `ae9cacd7`;\n\tconst APP_KEY = `70aef20fca3f8e082a952405036ecafc`;\n\tconst [ recipes, setRecipes ] = useState([]);\n\tconst [ search, setSearch ] = useState('');\n\tconst [ query, setQuery ] = useState('chicken');\n\n\tuseEffect(\n\t\t() => {\n\t\t\tgetRecipies();\n\t\t},\n\t\t[ query ]\n\t);\n\n\tconst getRecipies = async () => {\n\t\tconst response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n\t\tconst data = await response.json();\n\t\tsetRecipes(data.hits);\n\t\tconsole.log(data.hits);\n\t};\n\n\tconst getSearch = (e) => {\n\t\te.preventDefault();\n\t\tsetQuery(search);\n\t\tsetSearch('');\n\t};\n\n\tconst updateSearch = (e) => {\n\t\tsetSearch(e.target.value);\n\t\tconsole.log(search);\n\t};\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<form onSubmit={getSearch} className=\"search-form\">\n\t\t\t\t<input type=\"text\" className=\"search-bar\" value={search} onChange={updateSearch} />\n\t\t\t\t<button type=\"submit\" className=\"search-button\">\n\t\t\t\t\tSearch\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t\t<div className=\"recipes\">\n\t\t\t\t{recipes.map((recipe) => (\n\t\t\t\t\t<Recipe\n\t\t\t\t\t\tkey={recipe.recipe.label}\n\t\t\t\t\t\ttitle={recipe.recipe.label}\n\t\t\t\t\t\tcalories={recipe.recipe.calories}\n\t\t\t\t\t\timage={recipe.recipe.image}\n\t\t\t\t\t\tingredients={recipe.recipe.ingredients}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}